TODO. Client Server模型设计规范 ?
1. 发送的请求timeout如何处理 ?
2. 连接失败是否有retry自动重新连接的请求 ?
3. 是否会造成阻塞，异步等待或者callback回调 ?
4. 大量数据是否需要缓冲 ?
5. 服务端应该返回带有特定状态的Response

TODO. Client异步请求技术，避免客户端阻塞 !!
由于客户端发送的请求是一个耗时操作，服务端没有办法立即相应Response
客户端可以通过异步请求来避免阻塞，从而等待服务端处理并最终返回结果
1. Reactive 通过订阅方式，相应式编程
   httpClient.sendAsync(request, responseInfo -> new EventSubscriber())
2. Callback 通过回调方式，请求结束会调用回调方法
   httpAsyncClient.execute(post, FutureCallback());


TODO. 客户端<异步>获取消息更新的技术 ?
Make large payload exchange between HTTP services more efficient
Allow a client to receive messages about asynchronous updates from a server
1. Client Pull:
   A client periodically requests a server for updates
   客户端周期性地向Server端请求更新
   -- Short polling:
     发送请求，server端返回指定的response之后，确定关闭

   -- Long polling:
     The long polling request can timeout or can receive a disconnect from the server,
     in that case, the client has to open a new request.
     发送请求，在等到更新之前不关闭连接，如果在timeout时间内没有更新，发送特殊的Response

2. Server Push:
   A server proactively sends messages to clients immediately after they are available
   Server端主动在消息可用的时候，立即发送给client端
   -- Server-Sent Events:
     Send text messages only from a server to clients in browser-based web

   -- WebSocket:
     Simultaneous, bi-directional, real-time communication in web app based on a protocol other than HTTP(proxy servers, NATs, firewalls, etc)
     Allow both the server and the client to push messages at any time without any relation to a previous request.