TODO. Client Server模型设计规范 ?
1. 建立的连接, TCP or UDP ?
2. 发送的请求timeout(连接超时)如何处理 ? Server端怎么通过heartbeat心跳机制来实现 ?
3. 连接失败是否有retry自动重新连接的请求 ?  Connection: keep-alive ?
4. 请求的header(token身份验证)和body如何设置 ? Ability to specify headers ?
5. Server端决定请求是否Completed, 如何决定 ?
6. 是否会造成阻塞, 异步等待或者callback回调 ?
7. 大量数据是否需要缓冲 ?
8. log日志相关的问题 ?
9. 服务端(接受请求)的职责划分，区别login和loadData不同方面的请求
10. 服务端应该返回简单信息，还是返回带有特定的Response Status

TODO. 客户端<异步>获取消息更新的技术 ?
Make large payload exchange between HTTP services more efficient
Allow a client to receive messages about asynchronous updates from a server
1. Client Pull:
A client periodically requests a server for updates 客户端周期性地向Server端请求更新
- Short polling: 发送请求，server端返回指定的response之后，确定关闭
- Long polling: 发送请求，在等到更新之前，不关闭连接。如果在timeout时间内没有更新，发送特殊的Response

2. Server Push:
A server proactively sends messages to clients immediately after they are available
Server端主动在消息可用的时候，立即发送给client端
- Server-Sent Events: send text messages only from a server to clients in browser-based web
  https://github.com/aliakh/demo-spring-sse
- WebSocket:
  simultaneous, bi-directional, real-time communication in web app
  based on a protocol other than HTTP(proxy servers, NATs, firewalls, etc)
  allow both the server and the client to push messages at any time without any relation to a previous request.